#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;

__PACKAGE__->typeconv();
exit(0);

my $input;
my $from_type;
my $to_type;
my $help;
my $hex_format;
my $strip_spaces;

sub typeconv {
    GetOptions(
        'i|input=s',      => \$input,
        'f|fromt-type=s'  => \$from_type,
        't|to-type=s'     => \$to_type,
        'hf|hex-format=s' => \$hex_format,
        's|strip-spaces'  => \$strip_spaces,
        'h|help'          => \$help,
    );

    $help         //= 0;
    $hex_format   //= '0x';
    $strip_spaces //= 0;

    return help() if $help;

    $from_type = lc($from_type || '');
    $to_type   = lc($to_type   || '');

    die "ERROR: Empty input! Please pass a string with the input option...\n"
        if ! defined $input || ! length $input;

    die "ERROR: Missing type to convert data from! Please specify with -f or --from-type\n"
        if ! defined $from_type ||
           ! length  $from_type || $from_type !~ /^(ascii|bin|hex|dec)$/i;

    die "ERROR: Missing type to convert data to! Please specify with -t or --to-type\n"
        if ! defined $to_type ||
           ! length  $to_type || $to_type !~ /^(ascii|bin|hex|dec)$/i;

    die "ERROR: Data from and to types are the same! They must be different!\n"
        if lc $to_type eq lc $from_type; 

    die "ERROR: Invalid hex format! Options are: 'h', '0x', or 'x'!\n"
        if $hex_format !~ /^(h|x|0x)$/i;

    my $output = '';
    # ASCII -> conversions
    $output = ascii_to_bin($input) if $from_type =~ /^(ascii|a)$/ && $to_type =~ /^(bin|b)$/; 
    $output = ascii_to_hex($input) if $from_type =~ /^(ascii|a)$/ && $to_type =~ /^(hex|h)$/; 
    $output = ascii_to_dec($input) if $from_type =~ /^(ascii|a)$/ && $to_type =~ /^(dec|d)$/; 
    # Binary -> conversions
    $output = bin_to_ascii($input) if $from_type =~ /^(bin|b)$/ && $to_type =~ /^(ascii|a)$/;
    $output = bin_to_hex  ($input) if $from_type =~ /^(bin|b)$/ && $to_type =~ /^(hex|h)$/;
    $output = bin_to_dec  ($input) if $from_type =~ /^(bin|b)$/ && $to_type =~ /^(dec|d)$/;
    # Decimal -> conversions
    $output = dec_to_ascii($input) if $from_type =~ /^(dec|d)$/ && $to_type =~ /^(ascii|a)$/;
    $output = dec_to_hex  ($input) if $from_type =~ /^(dec|d)$/ && $to_type =~ /^(hex|h)$/;
    $output = dec_to_bin  ($input) if $from_type =~ /^(dec|d)$/ && $to_type =~ /^(bin|b)$/;

    # Strip whitespaces if the option was passed
    # to do so.
    $output =~ s/ //g if $strip_spaces;

    say $output;
}

# ----------------------------------------------------
# ASCII to binary conversion
# ----------------------------------------------------
sub ascii_to_bin {
    my $ascii    = shift || die "Missing ascii arg value!\n";
    my $bin      = '';
    my @unpacked = unpack('C*', $ascii);

    foreach my $dec (@unpacked) {
        $bin .= sprintf("%08b", $dec) . ' '; 
    }

    return $bin;
}

# ----------------------------------------------------
# ASCII to hexadecimal conversion
# ----------------------------------------------------
sub ascii_to_hex {
    my $ascii    = shift || die "Missing ascii arg value!\n";
    my $unpacked = unpack('H*', $ascii);
    my $len      = length($unpacked);
    my $hex      = '';

    for (my $i = 0; $i < $len; $i += 2) {
        $hex .= ($hex_format =~ /^(x|0x)$/ ? $hex_format : '') .
                substr($unpacked, $i, 2) .
                ($hex_format eq 'h' ? 'h ' : ' ');
    }

    return $hex;
}

# ----------------------------------------------------
# ASCII to decimal conversion
# ----------------------------------------------------
sub ascii_to_dec {
    my $ascii = shift || die "Missing ascii arg value!\n";
    my @dec   = unpack('C*', $ascii);
    return join(' ', @dec);
}

# ----------------------------------------------------
# Binary to decimal conversion
# ----------------------------------------------------
sub bin_to_dec {
    my $bin = shift || die "Missing binary arg value!\n";
    return unpack("N", pack("B32", substr("0" x 32 . $bin, -32)));
}

# ----------------------------------------------------
# Binary to hexidecimal conversion
# ----------------------------------------------------
sub bin_to_hex {
    my $ascii    = shift || die "Missing ascii arg value!\n";
    my $unpacked = unpack('H*', $ascii);
    my $len      = length($unpacked);
    my $hex      = '';

    for (my $i = 0; $i < $len; $i += 2) {
        $hex .= ($hex_format =~ /^(x|0x)$/ ? $hex_format : '') .
                substr($unpacked, $i, 2) .
                ($hex_format eq 'h' ? 'h ' : ' ');
    }

    return $hex;
}

# ----------------------------------------------------
# Binary to ASCII conversion
# ----------------------------------------------------
sub bin_to_ascii {
    my $bin    = shift || die "Missing ascii arg value!\n";
    my $chars  = length($bin);
    my $ascii  = '';
    my @packed = pack("B$chars", $bin);

    foreach my $c (@packed) {
        $ascii .= $c . ' ';
    }
    return $ascii;
}

# ----------------------------------------------------
# Decimal to binary conversion
# ----------------------------------------------------
sub dec_to_bin {
	my $str = unpack("B32", pack("N", shift));
	$str =~ s/^0+(?=\d)//;   # otherwise you'll get leading zeros
	return $str;
}

# ----------------------------------------------------
# Decimal to hexidecimal conversion
# ----------------------------------------------------
sub dec_to_hex {
	my $dec = shift or die "ERROR: missing required decimal argument!\n";
	my @arr = split(' ', $dec);
	my $hex = '';

	foreach my $d (@arr) {
		$hex .= sprintf(($hex_format =~ /^(x|0x)$/ ? $hex_format : '') . "%x" . ($hex_format eq 'h' ? 'h ' : ' '), $d);
	}

	return $hex;
}

# ----------------------------------------------------
# Decimal to ASCII conversion
# ----------------------------------------------------
sub dec_to_ascii {
	my $dec   = shift or die "ERROR: missing required decimal argument!\n";
	my @arr   = split(' ', $dec);
	my $ascii = '';
	$ascii .= chr($_) foreach @arr;
	return $ascii;
}

sub help {
    print qq{
NAME

    typeconv - type converter

OPTIONS

    -i,  --input            data to convert
    -f,  --from-type        data's original format (options: ascii, bin, hex, dec)
    -t,  --to-type          type to convert the data to (options: ascii, bin, hex, dec)
    -hf, --hex-format       hex output format (options: 'h', 'x', '0x') (default: '0x')
    -s,  --strip-spaces     strips spaces from the converted output (default: false)

};
    return 0;
}



